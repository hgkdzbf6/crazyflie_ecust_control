<?xml version="1.0"?>
 <!-- roslaunch leader_follower manager.launch -->
 <!-- 若想正常启动，需要正确连接的硬件设备有：-->
 <!-- 1-3 crazyradio-->
 <!-- 3 crazyflie-->
 <!-- 网线，连接vicon的-->
 <!-- 手柄-->

<launch>
<!-- 手柄参数-->
  <arg name="joy_dev" default="/dev/input/js0" />
  <!-- 飞机的地址，以及坐标系-->
  <arg name="uri1" default="radio://0/100/2M/E7E7E7E702" />
  <arg name="frame1" default="/vicon/C2/C2" />
  <arg name="uri2" default="radio://0/100/2M/E7E7E7E704" />
  <arg name="frame2" default="/vicon/C4/C4" />
  <arg name="uri3" default="radio://0/100/2M/E7E7E7E707" />
  <arg name="frame3" default="/vicon/C7/C7" />
  <arg name="worldFrame" default="/world" />
  <!-- 启动管理器-->
  <include file="$(find crazyflie_driver)/launch/crazyflie_server.launch">
  </include>
  <!-- 启动手柄节点-->
  <node name="joy" pkg="joy" type="joy_node" output="screen">
    <param name="dev" value="$(arg joy_dev)" />
  </node>


<!-- leader组可以由这么几个东西组成吧-->
  <group ns="leader_group">
  <!-- 添加飞机的参数控制，主要控制需要发送给飞机哪些参数吧-->
    <include file="$(find my_crazyflie_driver)/launch/my_crazyflie_add.launch">
      <arg name="uri" value="$(arg uri1)" />
      <arg name="tf_prefix" value="leader_group" />
      <arg name="enable_logging" value="False" />
    </include>
<!--飞机的控制器吧，替换成自己的normal控制器-->
<!--原来的是joystack_controller,也就是手柄的控制直接映射到每一个服务吧。-->
<!--现在是想用manager来发送指令，然后让normal来执行相应的动作-->
    <node name="pose" pkg="leader_follower" type="normal.py" output="screen">
      <param name="leaderFrame" value="/joy_goal" />
      <param name="frame" value="$(arg frame1)" />
    </node>

<!-- 接受手柄的消息，并做出相应的动作，其实就是执行相应的服务，是c++
    写的，觉得没必要这么写这个launch文件，直接吧这个文件拿出来就好了，日后再改
    controller.cpp 文件，发送msg，然后给crazyflie_server吧 -->
    <node name="controller" pkg="my_crazyflie_controller" type="my_crazyflie_controller" output="screen">
      <param name="frame" value="$(arg frame1)" />
      <param name="worldFrame" value="$(arg worldFrame)" />
      <rosparam command="load" file="$(find my_crazyflie_controller)/cfg/crazyflie2_1.yaml" />
    </node>

<!-- 目标位置的消息的生成-->
    <!--<node name="pose" pkg="leader_follower" type="pose.py" output="screen">
      <param name="frame" value="$(arg frame1)" />
      <param name="leaderFrame" value=""/>
      <param name="height" value="1" />
    </node>-->

    <node pkg="tf" type="static_transform_publisher" name="baselink_broadcaster" 
    args="0 0 0 0 0 0 1 $(arg frame1) /leader_group/base_link 100" />
  
  </group>


<!-- follower1组可以由这么几个东西组成吧-->
  <group ns="follower1_group">
  <!-- 添加飞机的参数控制，主要控制需要发送给飞机哪些参数吧-->
    <include file="$(find my_crazyflie_driver)/launch/my_crazyflie_add.launch">
      <arg name="uri" value="$(arg uri2)" />
      <arg name="tf_prefix" value="follower1_group" />
      <arg name="enable_logging" value="False" />
    </include>
<!--飞机的控制器吧，替换成自己的normal控制器-->
<!--原来的是joystack_controller,也就是手柄的控制直接映射到每一个服务吧。-->
<!--现在是想用manager来发送指令，然后让normal来执行相应的动作-->
    <node name="pose" pkg="leader_follower" type="normal.py" output="screen">
      <param name="leaderFrame" value="$(arg frame1)" />
      <param name="frame" value="$(arg frame2)" />
      <param name="offsetX" value="0.5" />
    </node>
<!-- 接受手柄的消息，并做出相应的动作，其实就是执行相应的服务，是c++
    写的，觉得没必要这么写这个launch文件，直接吧这个文件拿出来就好了，日后再改
    controller.cpp 文件，发送msg，然后给crazyflie_server吧 -->

    <node name="controller" pkg="my_crazyflie_controller" type="my_crazyflie_controller" output="screen">
      <param name="frame" value="$(arg frame2)" />
      <param name="worldFrame" value="$(arg worldFrame)" />
      <rosparam command="load" file="$(find my_crazyflie_controller)/cfg/crazyflie2_1.yaml" />
    </node>


<!-- 目标位置的消息的生成-->
    <!--<node name="pose" pkg="leader_follower" type="pose.py" output="screen">
      <param name="frame" value="$(arg frame2)" />
      <param name="leaderFrame" value=""/>
      <param name="height" value="1.1" />
    </node>-->

        <node pkg="tf" type="static_transform_publisher" name="baselink_broadcaster" 
    args="0 0 0 0 0 0 1 $(arg frame2) /follower1_group/base_link 100" />
  </group>


  <!-- follower2组可以由这么几个东西组成吧-->
  <group ns="follower2_group">
  <!-- 添加飞机的参数控制，主要控制需要发送给飞机哪些参数吧-->
    <include file="$(find my_crazyflie_driver)/launch/my_crazyflie_add.launch">
      <arg name="uri" value="$(arg uri3)" />
      <arg name="tf_prefix" value="follower2_group" />
      <arg name="enable_logging" value="False" />
    </include>
<!--飞机的控制器吧，替换成自己的normal控制器-->
<!--原来的是joystack_controller,也就是手柄的控制直接映射到每一个服务吧。-->
<!--现在是想用manager来发送指令，然后让normal来执行相应的动作-->
    <node name="pose" pkg="leader_follower" type="normal.py" output="screen">
      <param name="leaderFrame" value="$(arg frame2)" />
      <param name="frame" value="$(arg frame3)" />
      <param name="offsetX" value="0.5" />
    </node>
<!-- 接受手柄的消息，并做出相应的动作，其实就是执行相应的服务，是c++
    写的，觉得没必要这么写这个launch文件，直接吧这个文件拿出来就好了，日后再改
    controller.cpp 文件，发送msg，然后给crazyflie_server吧 -->
    <node name="controller" pkg="my_crazyflie_controller" type="my_crazyflie_controller" output="screen">
      <param name="frame" value="$(arg frame3)" />
      <param name="worldFrame" value="$(arg worldFrame)" />
      <rosparam command="load" file="$(find my_crazyflie_controller)/cfg/crazyflie2_1.yaml" />
    </node>
<!-- 目标位置的消息的生成-->
    <!--<node name="pose" pkg="leader_follower" type="pose.py" output="screen">
      <param name="frame" value="$(arg frame3)" />
      <param name="leaderFrame" value=""/>
      <param name="height" value="1.3" />
    </node>-->

    <node pkg="tf" type="static_transform_publisher" name="baselink_broadcaster" 
    args="0 0 0 0 0 0 1 $(arg frame3) /follower2_group/base_link 100" />
  </group>

<!--还需要有manager.py节点来管理以下三个节点。-->
 <node name="manager" pkg="leader_follower" type="manager.py" output="screen">
  <param name="leader_node" value="/leader_group" /> 
  <param name="follower1_node" value="/follower1_group" />
  <param name="follower2_node" value="/follower2_group" />
 </node> 
 
 <node name="joy_goal" pkg="leader_follower" type="JoyGoal.py" output="screen">
 </node>

  <!-- 运行 vicon bridge -->
  <include file="$(find vicon_bridge)/launch/vicon.launch"/>

  <!-- run rviz -->
  <!--第一个是那个飞机的形状吧-->
  <param name="robot_description" command="$(find xacro)/xacro.py $(find crazyflie_description)/urdf/crazyflie.urdf.xacro" />
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find leader_follower)/launch/leader_follower.rviz" required="true" />

</launch>
